generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum Quantity {
  quantity
}

enum Color {
  black
  blue
  rose
}

enum Fringe {
  no_fringe
  one_edge
  four_edge
  full_frame
}

enum Fabric {
  polyester
  silk
  cotton
  linen
  faux_fur
  denim
}

enum BackDesign {
  solid_color
  match_front_design
  custom_design
}

model Configuration {
  id              String      @id @default(cuid())
  width           Int
  height          Int
  imageUrl        String
  croppedImageUrl String?
  quantity        Int         @default(1)
  color           Color?
  fringe          Fringe?
  fabric          Fabric?
  backDesign      BackDesign?
  Order           Order[]
}

model User {
  id        String   @id @default(cuid())
  email     String
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postal_code String
  country     String
  state       String?
  phone       String?
  order       Order[] //one shipping address can have multiple orders
}

model BillingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postal_code String
  country     String
  state       String?
  phone       String?
  order       Order[] //one shipping address can have multiple orders
}

model Order {
  id                String           @id @default(cuid())
  configurationId   String
  configuration     Configuration    @relation(fields: [configurationId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  amount            Float
  isPaid            Boolean          @default(false)
  status            OrderStatus      @default(awaiting_shipment)
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?
  transactionId     String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}
